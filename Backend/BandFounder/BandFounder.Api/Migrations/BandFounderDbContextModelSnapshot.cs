// <auto-generated />
using System;
using BandFounder.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BandFounder.Api.Migrations
{
    [DbContext(typeof(BandFounderDbContext))]
    partial class BandFounderDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AccountArtist", b =>
                {
                    b.Property<Guid>("AccountsId")
                        .HasColumnType("uuid");

                    b.Property<string>("ArtistsId")
                        .HasColumnType("text");

                    b.HasKey("AccountsId", "ArtistsId");

                    b.HasIndex("ArtistsId");

                    b.ToTable("AccountArtist");
                });

            modelBuilder.Entity("AccountChatroom", b =>
                {
                    b.Property<Guid>("ChatroomsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MembersId")
                        .HasColumnType("uuid");

                    b.HasKey("ChatroomsId", "MembersId");

                    b.HasIndex("MembersId");

                    b.ToTable("AccountChatroom");
                });

            modelBuilder.Entity("AccountMusicianRole", b =>
                {
                    b.Property<Guid>("AccountsId")
                        .HasColumnType("uuid");

                    b.Property<string>("MusicianRolesName")
                        .HasColumnType("text");

                    b.HasKey("AccountsId", "MusicianRolesName");

                    b.HasIndex("MusicianRolesName");

                    b.ToTable("AccountMusicianRole");
                });

            modelBuilder.Entity("ArtistGenre", b =>
                {
                    b.Property<string>("ArtistsId")
                        .HasColumnType("text");

                    b.Property<string>("GenresName")
                        .HasColumnType("text");

                    b.HasKey("ArtistsId", "GenresName");

                    b.HasIndex("GenresName");

                    b.ToTable("ArtistGenre");
                });

            modelBuilder.Entity("BandFounder.Domain.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("BandFounder.Domain.Entities.Artist", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Popularity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("BandFounder.Domain.Entities.Chatroom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ChatRoomType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Chatrooms");
                });

            modelBuilder.Entity("BandFounder.Domain.Entities.Genre", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Name");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Name = "Pop"
                        },
                        new
                        {
                            Name = "Hip-Hop"
                        },
                        new
                        {
                            Name = "Rap"
                        },
                        new
                        {
                            Name = "Rock"
                        },
                        new
                        {
                            Name = "Indie"
                        },
                        new
                        {
                            Name = "Electronic"
                        },
                        new
                        {
                            Name = "Dance"
                        },
                        new
                        {
                            Name = "R&B"
                        },
                        new
                        {
                            Name = "Soul"
                        },
                        new
                        {
                            Name = "Jazz"
                        },
                        new
                        {
                            Name = "Classical"
                        },
                        new
                        {
                            Name = "Metal"
                        },
                        new
                        {
                            Name = "Punk"
                        },
                        new
                        {
                            Name = "Reggae"
                        },
                        new
                        {
                            Name = "Funk"
                        },
                        new
                        {
                            Name = "Blues"
                        },
                        new
                        {
                            Name = "Country"
                        },
                        new
                        {
                            Name = "K-Pop"
                        },
                        new
                        {
                            Name = "Folk"
                        },
                        new
                        {
                            Name = "Edm"
                        },
                        new
                        {
                            Name = "Trap"
                        },
                        new
                        {
                            Name = "Ambient"
                        },
                        new
                        {
                            Name = "House"
                        },
                        new
                        {
                            Name = "Techno"
                        },
                        new
                        {
                            Name = "Dubstep"
                        },
                        new
                        {
                            Name = "Grunge"
                        },
                        new
                        {
                            Name = "Synthwave"
                        });
                });

            modelBuilder.Entity("BandFounder.Domain.Entities.Listing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("GenreName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GenreName");

                    b.HasIndex("OwnerId");

                    b.ToTable("Listings");
                });

            modelBuilder.Entity("BandFounder.Domain.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChatRoomId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ChatRoomId");

                    b.HasIndex("SenderId");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("BandFounder.Domain.Entities.MusicianRole", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Name");

                    b.ToTable("MusicianRoles");

                    b.HasData(
                        new
                        {
                            Name = "Songwriter"
                        },
                        new
                        {
                            Name = "Vocalist"
                        },
                        new
                        {
                            Name = "Guitarist"
                        },
                        new
                        {
                            Name = "Bassist"
                        },
                        new
                        {
                            Name = "Drummer"
                        },
                        new
                        {
                            Name = "Keyboardist"
                        },
                        new
                        {
                            Name = "Pianist"
                        },
                        new
                        {
                            Name = "Trumpeter"
                        },
                        new
                        {
                            Name = "Violinist"
                        },
                        new
                        {
                            Name = "Synthesizer"
                        },
                        new
                        {
                            Name = "Sampler"
                        },
                        new
                        {
                            Name = "Sound Engineer"
                        },
                        new
                        {
                            Name = "Producer"
                        },
                        new
                        {
                            Name = "Acoustic Guitarist"
                        },
                        new
                        {
                            Name = "Mixing Engineer"
                        },
                        new
                        {
                            Name = "Mastering Engineer"
                        });
                });

            modelBuilder.Entity("BandFounder.Domain.Entities.MusicianSlot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ListingId")
                        .HasColumnType("uuid");

                    b.Property<string>("RoleName")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ListingId");

                    b.HasIndex("RoleName");

                    b.ToTable("MusicianSlots");
                });

            modelBuilder.Entity("BandFounder.Domain.Entities.ProfilePicture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<byte[]>("ImageData")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("ProfilePictures");
                });

            modelBuilder.Entity("BandFounder.Domain.Entities.SpotifyTokens", b =>
                {
                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AccountId");

                    b.ToTable("SpotifyTokens");
                });

            modelBuilder.Entity("AccountArtist", b =>
                {
                    b.HasOne("BandFounder.Domain.Entities.Account", null)
                        .WithMany()
                        .HasForeignKey("AccountsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BandFounder.Domain.Entities.Artist", null)
                        .WithMany()
                        .HasForeignKey("ArtistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AccountChatroom", b =>
                {
                    b.HasOne("BandFounder.Domain.Entities.Chatroom", null)
                        .WithMany()
                        .HasForeignKey("ChatroomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BandFounder.Domain.Entities.Account", null)
                        .WithMany()
                        .HasForeignKey("MembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AccountMusicianRole", b =>
                {
                    b.HasOne("BandFounder.Domain.Entities.Account", null)
                        .WithMany()
                        .HasForeignKey("AccountsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BandFounder.Domain.Entities.MusicianRole", null)
                        .WithMany()
                        .HasForeignKey("MusicianRolesName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ArtistGenre", b =>
                {
                    b.HasOne("BandFounder.Domain.Entities.Artist", null)
                        .WithMany()
                        .HasForeignKey("ArtistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BandFounder.Domain.Entities.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BandFounder.Domain.Entities.Chatroom", b =>
                {
                    b.HasOne("BandFounder.Domain.Entities.Account", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("BandFounder.Domain.Entities.Listing", b =>
                {
                    b.HasOne("BandFounder.Domain.Entities.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreName");

                    b.HasOne("BandFounder.Domain.Entities.Account", "Owner")
                        .WithMany("Listings")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("BandFounder.Domain.Entities.Message", b =>
                {
                    b.HasOne("BandFounder.Domain.Entities.Chatroom", "Chatroom")
                        .WithMany("Messages")
                        .HasForeignKey("ChatRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BandFounder.Domain.Entities.Account", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Chatroom");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("BandFounder.Domain.Entities.MusicianSlot", b =>
                {
                    b.HasOne("BandFounder.Domain.Entities.Listing", "Listing")
                        .WithMany("MusicianSlots")
                        .HasForeignKey("ListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BandFounder.Domain.Entities.MusicianRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleName");

                    b.Navigation("Listing");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BandFounder.Domain.Entities.ProfilePicture", b =>
                {
                    b.HasOne("BandFounder.Domain.Entities.Account", "Account")
                        .WithOne("ProfilePicture")
                        .HasForeignKey("BandFounder.Domain.Entities.ProfilePicture", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BandFounder.Domain.Entities.SpotifyTokens", b =>
                {
                    b.HasOne("BandFounder.Domain.Entities.Account", "Account")
                        .WithOne("SpotifyTokens")
                        .HasForeignKey("BandFounder.Domain.Entities.SpotifyTokens", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BandFounder.Domain.Entities.Account", b =>
                {
                    b.Navigation("Listings");

                    b.Navigation("ProfilePicture");

                    b.Navigation("SpotifyTokens");
                });

            modelBuilder.Entity("BandFounder.Domain.Entities.Chatroom", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("BandFounder.Domain.Entities.Listing", b =>
                {
                    b.Navigation("MusicianSlots");
                });
#pragma warning restore 612, 618
        }
    }
}
